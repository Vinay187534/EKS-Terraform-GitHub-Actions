name: Build, Test, Scan, and Deploy to EKS

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Java JDK & Maven
        uses: actions/setup-java@v2
        with:
          distribution: "temurin"
          java-version: "21"
          cache: maven

      # Step 5: Cache Maven dependencies
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/green-global-initiative-api/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Generate Maven Wrapper
        run: sudo mvn -N io.takari:maven:wrapper
        working-directory: ./green-global-initiative-api

      # Step 6: Ensure mvnw is executable (fix the permission issue)
      - name: Ensure mvnw is executable
        # working-directory: ./green-global-initiative-api
        run: sudo chmod +x ./green-global-initiative-api/mvnw

      # Step 7: List files in the directory
      - name: List files in the directory
        run: ls -la ./green-global-initiative-api

      - name: Build and test with Maven
        run: mvn clean install -DskipTests -Dmaven.javadoc.skip=true
        working-directory: ./green-global-initiative-api

      - name: Run Snyk Security Scan
        run: |
          npm install -g snyk
          snyk test --severity-threshold=critical
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        working-directory: ./green-global-initiative-api

      # Step 9: Trivy file scan (for backend)
      - name: Trivy File Scan
        run: |
          trivy fs ./green-global-initiative-api --severity HIGH,CRITICAL --ignore-unfixed > trivyfs-backend.txt

      - name: Docker Build Backend Image
        run: |
          docker build -t ${DOCKER_HUB_USERNAME}/backend:${GITHUB_SHA} ./green-global-initiative-api

      # Step 12: Trivy Docker Image Scan
      - name: Trivy Image Scan
        run: |
          trivy image ${DOCKER_HUB_USERNAME}/backend:${GITHUB_SHA} --severity HIGH,CRITICAL > trivyimage-backend.txt

      - name: Push Docker Image to Docker Hub
        run: |
          echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login --username ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
          docker push ${DOCKER_HUB_USERNAME}/backend:${GITHUB_SHA}

      - name: Update Deployment Image in YAML
        run: |
          IMAGE_TAG=${GITHUB_SHA}
          sed -i "s|image: .*$|image: ${DOCKER_HUB_USERNAME}/backend:${IMAGE_TAG}|" ./Kubernetes-Manifest-Files/Backend/deployment.yaml
          git config --global user.email "L00187534@atu.ie"
          git config --global user.name "vinay187534"
          git add ./Kubernetes-Manifest-Files/Backend/deployment.yaml
          git commit -m "Update backend image tag to ${IMAGE_TAG}"
          git push https://${{ secrets.G_TOKEN }}@github.com/${{ github.repository }} HEAD:main

  # deploy:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v2

  #     - name: Set up AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     - name: Set up kubectl for EKS
  #       run: aws eks update-kubeconfig --name dev-eks-cluster --region ${{ secrets.AWS_REGION }}

  #     - name: Deploy Kubernetes Manifests to EKS
  #       working-directory: ./Kubernetes-Manifest-Files
  #       run: |
  #         kubectl create namespace three-tier || echo "Namespace already exists"
  #         kubectl apply -f ./Database/
  #         kubectl apply -f ./Backend/
  #         kubectl apply -f ./frontend/
  #         kubectl apply -f ./Frontend-ingress/frontend-ingress.yaml
  #         kubectl apply -f ./Backend-ingress/backend-ingress.yaml
