name: Build, Test, Scan, and Deploy to EKS

on:
  push:
    branches:
      - main # Trigger deployment on push to main branch (modify as necessary)

jobs:
  build:
    runs-on: [self-hosted]
    permissions:
      contents: write

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    steps:
      # Step to check if folder exists and remove it
      - name: Remove folder if it exists
        run: |
          if [ -d "/home/ubuntu/actions-runner/deploy-backend/EKS-Terraform-GitHub-Actions/EKS-Terraform-GitHub-Actions/green-global-initiative-api/.mvn" ]; then
            sudo rm -rf /home/ubuntu/actions-runner/deploy-backend/EKS-Terraform-GitHub-Actions/EKS-Terraform-GitHub-Actions/green-global-initiative-api/.mvn
            echo "Folder deleted."
          else
            echo "Folder does not exist. Skipping deletion."
          fi
        shell: bash

      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v2

      # Step 2: Set up AWS credentials
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Set up Java JDK  Maven
      - name: Set up Java JDK
        uses: actions/setup-java@v2
        with:
          java-version: "21" # Adjust as necessary
          distribution: "temurin"

      # Step 4: Set up Maven
      - name: Set up Maven
        uses: actions/setup-java@v2
        with:
          java-version: "21"
          maven-version: "3.8.7" # Adjust as necessary
          distribution: "temurin" # Same distribution as for Java

      # Step 5: Cache Maven dependencies
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/green-global-initiative-api/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Generate Maven Wrapper
        run: sudo mvn -N io.takari:maven:wrapper
        working-directory: ./green-global-initiative-api

      # Step 6: Ensure mvnw is executable (fix the permission issue)
      - name: Ensure mvnw is executable
        # working-directory: ./green-global-initiative-api
        run: sudo chmod +x ./green-global-initiative-api/mvnw

      # Step 7: List files in the directory
      - name: List files in the directory
        run: ls -la ./green-global-initiative-api

      # Step 6: Build and test with Maven (from your code directory)
      - name: Build and test with Maven
        run: mvn clean install -DskipTests -Dmaven.javadoc.skip=true
        working-directory: ./green-global-initiative-api

      # Step 7: SonarQube scan (optional step for code quality)
      # - name: SonarQube Scan
      #   uses: sonarsource/sonarcloud-github-action@v1
      #   with:
      #     sonar-token: ${{ secrets.SONARQUBE_TOKEN }}
      #   env:
      #     SONARQUBE_HOST_URL: https://sonarcloud.io
      #     SONARQUBE_PROJECT_KEY: three-tier-backend
      #     SONARQUBE_PROJECT_NAME: three-tier-backend
      #   working-directory: green-global-initiative/green-global-initiative-api

      # Step 8: Run Dependency-Check Scan
      - name: Run Dependency-Check Scan
        run: |
          dependency-check --scan ./green-global-initiative-api --out ./green-global-initiative-api/dependency-check-report.html
          dependency-check-publisher -f ./green-global-initiative-api/dependency-check-report.html
        continue-on-error: true

      - name: Run OWASP Dependency Check
        continue-on-error: true
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "EKS-Terraform-GitHub-Actions"
          format: "ALL"
          fail_on_cvss: 7

      # # Step 7: Install Snyk CLI
      # - name: Install Snyk CLI
      #   run: sudo npm install -g snyk

      # # Step 7: Check if Snyk CLI is installed
      # - name: Check Snyk CLI installation
      #   run: |
      #     if ! sudo command -v snyk &> /dev/null; then
      #       echo "Snyk CLI is not installed. Installing now..."
      #       sudo npm install -g snyk
      #     else
      #       echo "Snyk CLI is already installed."
      #       sudo snyk --version
      #     fi

      # - name: Authenticate Snyk CLI
      #   run: snyk auth ${{ secrets.SNYK_TOKEN }}

      # - name: Verify Snyk Authentication
      #   run: |
      #     sudo snyk auth ${{ secrets.SNYK_TOKEN }}
      #     if [ $? -ne 0 ]; then
      #       echo "Snyk authentication failed"
      #       exit 1
      #     fi

      # Snyk Integration
      - name: Run Snyk to check for vulnerabilities
        working-directory: /home/ubuntu/actions-runner/deploy-backend/EKS-Terraform-GitHub-Actions/EKS-Terraform-GitHub-Actions/green-global-initiative-api
        continue-on-error: true
        run: |
          sudo npm install -g snyk
          sudo snyk test --severity-threshold=critical
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # Step 8: Snyk Security Scans for Java
      - name: Snyk Security Scan
        run: snyk test --org=vinay187534 --project-name='EKS-Terraform-GitHub-Actions' --file=/home/ubuntu/actions-runner/deploy-backend/EKS-Terraform-GitHub-Actions/EKS-Terraform-GitHub-Actions/green-global-initiative-api/pom.xml
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        working-directory: ./green-global-initiative-api

      - name: Snyk Monitor
        run: snyk monitor --org=vinay187534 --project-name='EKS-Terraform-GitHub-Actions' --file=/home/ubuntu/actions-runner/deploy-backend/EKS-Terraform-GitHub-Actions/EKS-Terraform-GitHub-Actions/green-global-initiative-api/pom.xml
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        working-directory: ./green-global-initiative-api

      # # Step 9: Snyk security scan step for Code Scanning
      # - name: Run Snyk to check for vulnerabilities
      #   run: snyk test --org=Vinay187534 --project-name='EKS-Terraform-GitHub-Actions' --file=./pom.xml --sarif-file-output=snyk.sarif
      #   continue-on-error: true
      #   env:
      #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      #   working-directory: ./green-global-initiative-api

      # - name: Upload SARIF to GitHub Security Center
      #   uses: github/codeql-action/upload-sarif@v3
      #   with:
      #     sarif_file: snyk.sarif
      #     category: "Snyk OpenSource Unique Category"

      # Step 9: Trivy file scan (for backend)
      - name: Trivy File Scan
        run: |
          trivy fs ./green-global-initiative-api --severity HIGH,CRITICAL --ignore-unfixed > trivyfs-backend.txt

      # Step 10: Docker Image Build for Backend
      - name: Docker Build Backend Image
        run: |
          docker system prune -f
          docker container prune -f
          docker build -t ${DOCKER_HUB_USERNAME}/backend:${GITHUB_SHA} ./green-global-initiative-api

      # Step 11: Push Docker Image to Docker Hub
      - name: Push Docker Image to Docker Hub
        run: |
          echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login --username ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
          docker tag ${DOCKER_HUB_USERNAME}/backend:${GITHUB_SHA} ${DOCKER_HUB_USERNAME}/backend:${GITHUB_SHA}
          docker push ${DOCKER_HUB_USERNAME}/backend:${GITHUB_SHA}

      # Step 12: Trivy Docker Image Scan
      - name: Trivy Image Scan
        run: |
          trivy image ${DOCKER_HUB_USERNAME}/backend:${GITHUB_SHA} --severity HIGH,CRITICAL > trivyimage-backend.txt

      # Step: 13: Verify Repository Access
      - name: Verify Repository Access
        run: |
          git config --global user.email "L00187534@atu.ie"
          git config --global user.name "vinay187534"
          git ls-remote https://${{ secrets.G_TOKEN }}@github.com/${{ github.repository }}

      # Step 14: Update Deployment Image in YAML
      - name: Update Deployment Image in YAML
        run: |
          IMAGE_TAG=${GITHUB_SHA}
          sed -i "s|image: .*$|image: ${DOCKER_HUB_USERNAME}/backend:${IMAGE_TAG}|" ./Kubernetes-Manifest-Files/Backend/deployment.yaml
          git config user.email "L00187534@atu.ie"
          git config user.name "vinay187534"
          git add ./Kubernetes-Manifest-Files/Backend/deployment.yaml
          git commit -m "Update backend image tag to ${IMAGE_TAG}"
          git push https://${{ secrets.G_TOKEN }}@github.com/${{ github.repository }} HEAD:main

      # Step 15: Rollout deployment with the new image
      # - name: Rollout deployment with new image
      #   run: |
      #     kubectl rollout restart deployment backend -n three-tier  # Replace <namespace> with your actual namespace
      #     kubectl rollout status deployment backend -n three-tier

  # Job 2: Deploy to Kubernetes (EKS)
  # deploy:
  #   needs: build # Ensure that the deploy job runs only after the build job completes
  #   runs-on: [self-hosted]
  #   env:
  #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     AWS_REGION: ${{ secrets.AWS_REGION }}
  #     DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  #     DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
  #   steps:
  #     # Step 1: Checkout the repository
  #     - name: Checkout Repository
  #       uses: actions/checkout@v2

  #     # Step 2: Set up AWS credentials
  #     - name: Set up AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     # Step 3: Set up kubectl for EKS
  #     - name: Set up kubectl
  #       run: |
  #         aws eks update-kubeconfig --name dev-eks-cluster --region ${{ secrets.AWS_REGION }}

  #     # Step 4: Set up eksctl
  #     - name: Set up eksctl
  #       uses: eksctl/eksctl-action@v1

  #     # Step 5: Deploy Kubernetes Manifests to EKS
  #     - name: Deploy Kubernetes Manifests to EKS
  #       working-directory: ./Kubernetes-Manifest-Files
  #       run: |
  #         kubectl create namespace three-tier || echo "Namespace already exists"
  #         kubectl apply -f ./Database/dockersecret.yaml
  #         kubectl apply -f ./Database/secret.yaml
  #         kubectl apply -f ./Database/configmap.yaml
  #         kubectl apply -f ./Database/sql-configmap.yaml
  #         kubectl apply -f ./Database/pv.yaml
  #         kubectl apply -f ./Database/pvc.yaml
  #         kubectl apply -f ./Database/deployment.yaml
  #         kubectl apply -f ./Database/service.yaml
  #         kubectl apply -f ./Backend/deployment.yaml
  #         kubectl apply -f ./Backend/service.yaml
  #         kubectl apply -f ./frontend/deployment.yaml
  #         kubectl apply -f ./frontend/service.yaml
  #         kubectl apply -f ./Frontend-ingress/frontend-ingress.yaml
  #         kubectl apply -f ./Backend-ingress/backend-ingress.yaml
